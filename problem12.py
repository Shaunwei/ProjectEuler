#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from utils import factorize

def get_nth_first_triangle_num(n):
    triangle_num  = get_next_triangle_num()
    while n > 1:
        triangle_num.next()
        n -= 1
    else:
        return triangle_num.next()

def get_next_triangle_num():
    a = 1
    value = 0
    while True:
        value += a
        a += 1
        yield value

def get_n_divisors(n):
    divisors = len(factorize(n))
    return divisors 

def get_triangle_num_with_n_divisors(n):
    triangle_num = get_next_triangle_num()
    flag = False
    triangle_num_dict = {}
    while not flag:
        value = triangle_num.next()
        if get_n_divisors(value) > n:
            flag = True
    else:
        return value

if __name__=='__main__':
    print('test 28 is the first number have five divisors')
    test = get_nth_first_triangle_num(7)
    assert test==28, 'Should get 28, got %d' % test
    test = get_triangle_num_with_n_divisors(5)
    assert test==28, 'Should get 28, got %d' % test
    print('Pass test.')
    
    print('test 500th number.')
    value = get_triangle_num_with_n_divisors(500)
    print(value)
